
# handlers.py
from aiogram import types
from aiogram.dispatcher import FSMContext
from config import dp, bot, ADMIN_ID, USDT_ADDRESS
from db import get_all_dediks, create_order, get_user_orders, mark_order_paid
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
import keyboards
from datetime import datetime

# --- FSM –¥–ª—è email –∏ —Å—Ä–æ–∫–∞ ---
class Buy(StatesGroup):
    DEDIK_ID = State()
    DURATION = State()
    EMAIL = State()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –¥–µ–¥–∏–∫–æ–≤!</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:")
    await message.answer(text, parse_mode="HTML", reply_markup=keyboards.main_menu())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
@dp.message_handler(lambda msg: msg.text == "üì¶ –¢–∞—Ä–∏—Ñ—ã")
async def show_tariffs(message: types.Message):
    dediks = get_all_dediks()
    await message.answer("üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:", reply_markup=keyboards.tariff_list(dediks))

@dp.message_handler(lambda msg: msg.text == "üì® –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_msg(message: types.Message):
    await message.answer(
        "üõü –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:\nüìß <b>suppintelitainment@gmail.com</b>", parse_mode="HTML")

@dp.message_handler(lambda msg: msg.text == "üßæ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders(message: types.Message):
    orders = get_user_orders(message.from_user.id)
    if not orders:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    text = "üìÑ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n"
    for name, duration, price, created in orders:
        text += f"‚Ä¢ {name} ‚Äî {duration} –º–µ—Å ‚Äî {price}$ ‚Äî {created[:10]}\n"
    await message.answer(text)

# --- –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ ---
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("buy:"))
async def choose_duration(callback: types.CallbackQuery, state: FSMContext):
    dedik_id = int(callback.data.split(":")[1])
    await state.update_data(dedik_id=dedik_id)
    await Buy.DURATION.set()

    await callback.message.answer(
        "‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:",
        reply_markup=keyboards.duration_buttons(dedik_id))
    await callback.answer()

# --- –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ ---
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("duration:"), state=Buy.DURATION)
async def ask_email(callback: types.CallbackQuery, state: FSMContext):
    _, dedik_id, months = callback.data.split(":")
    await state.update_data(dedik_id=int(dedik_id), duration=int(months))
    await Buy.EMAIL.set()
    await callback.message.answer("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è —Å–≤—è–∑–∏:")
    await callback.answer()

# --- –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ email ---
@dp.message_handler(state=Buy.EMAIL)
async def handle_email(message: types.Message, state: FSMContext):
    data = await state.get_data()
    dedik_id = data["dedik_id"]
    duration = data["duration"]
    email = message.text.strip()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –∏ —Ü–µ–Ω—ã
    dediks = get_all_dediks()
    name, base_price = next((n, p) for (i, n, p) in dediks if i == dedik_id)

    if base_price == 5:
        price = {1: 5, 3: 25, 6: 50}[duration]
    elif base_price == 19.99:
        price = {1: 19.99, 3: 55, 6: 100}[duration]
    elif base_price == 59.99:
        price = {1: 59.99, 3: 165, 6: 300}[duration]
    else:
        price = base_price * duration

    order_id = create_order(message.from_user.id, email, dedik_id, duration, price)

    # –ö–Ω–æ–ø–∫–∞ "–û–ø–ª–∞—Ç–∏–ª"
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid:{order_id}")
    )

    text = (
        f"<b>–í–∞—à –∑–∞–∫–∞–∑ #{order_id}</b>\n"
        f"–¢–∞—Ä–∏—Ñ: <b>{name}</b> ‚Äî {duration} –º–µ—Å ‚Äî ${price}\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞ USDT (TRC20) –Ω–∞ –∞–¥—Ä–µ—Å:\n<code>{USDT_ADDRESS}</code>\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    await message.answer(text, parse_mode="HTML", reply_markup=kb)

    await bot.send_message(
        ADMIN_ID,
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\nEmail: {email}\n–¢–∞—Ä–∏—Ñ: {name} ‚Äî {duration} –º–µ—Å ‚Äî ${price}"
    )

    await state.finish()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏–ª" ---
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("paid:"))
async def process_paid(callback: types.CallbackQuery):
    order_id = int(callback.data.split(":")[1])

    mark_order_paid(order_id)

    await callback.message.edit_reply_markup()
    await bot.send_message(callback.from_user.id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –û–∂–∏–¥–∞–π—Ç–µ ‚Äî –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É.")
    await bot.send_message(ADMIN_ID, f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π.")
    await callback.answer()
